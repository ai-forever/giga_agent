from typing import Annotated

from langchain_core.tools import tool
from langgraph.prebuilt import InjectedState

from giga_agent.tools.python import ExecuteTool


@tool
async def python(
    state: Annotated[dict, InjectedState],
    code: Annotated[str, InjectedState],
):
    """Выполняет Python-код в виртуальной машине. Этот код выполняется в Jupyter ноутбуке, все переменные в сессии сохраняются.
    Обязательно пиши код по шагам! Если тебе не хватает какой-либо информации, которую ты можешь получить выполнив код, напиши необходимы блок кода, получи информацию и пиши новый блок кода!
    В качестве отображения графиков используй plotly.
    Если тебе чего-то не хватает, для выполнения кода, например API токен, попроси пользователя заполнить нужные данные.
    Ни в коем случае не используй input. Вместо использования переменных, которые по логике должен вставить пользователь, сначала запроси их.
    Требования к коду:
    - Качество кода: Твой код должен следовать стандартам PEP8, быть читаемым и профессиональным.
    - Обработка ошибок: Если в исполнении кода возникла ошибка, необходимо её исправить и предоставить исправленный вариант кода.
    - Визуализация данных: Используй `plotly` для всех графических представлений данных.
    - Импорты: Начни свой код с четкого и корректного блока импортов
    - Типы данных: Следи за корректным преобразованием типов данных в своих операциях.
    - Формат ответа: Отвечай на запросы пользователя, используя markdown для оформления.
    - Показывание изображение: Ни в коем случае не сохраняй изображения, а показывай их в формате Jupyter ноутбуков
    - Doc: используй python-docx для работы с файлами docx/doc

    Чтобы корректно вызвать этот инструмент, обязательно пиши код в своем сообщении и вызывай инструмент `python`!
    """
    jupyter_executor = ExecuteTool(kernel_id=state["kernel_id"])
    return await jupyter_executor.ainvoke({"code": code})
